"use strict";
const { MongoClient } = require("mongodb");

require("dotenv").config();
const { MONGO_URI } = process.env;

const options = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
};

const addBloco = async (request, response) => {
  //the bloco id will be generated by uuid latter
  //the admId will be the user "sub" created by auth0
  //the admName will be the user "nickname" crated by auth0
  const { name, address, lat, lng, admId, admName } = request.body;

  if (!name || !address || !lat || !lng || !admId || !admName) {
    return response
      .status(400)
      .json({
        status: 400,
        data: {
          name: name || "Missing name",
          address: address || "Missing address",
          lat: lat || "Missing latitude",
          lng: lng || "Missing longitude",
          admId: admId || "Missing admnistrator ID",
          admName: admName || "Missing admnistrator name",
        },
      });
  }

  if (typeof lat !== "number" || typeof lng !== "number"){
    return response.status(400).json({status: 400, message: "Latitude and Longitude must be numbers"})
  }

  //ADD FILTER FOR SPECIAL CARACTERES FOR THE NAME

  const lowerCaseName = name.toLowerCase();
  const lowerCaseAddress = address.toLowerCase();

  const client = new MongoClient(MONGO_URI, options);

  try {
    await client.connect();
    const db = client.db("find-my-bloco");

    // getting the array of items from the user`s cart
    const hasBloco = await db.collection("blocos").findOne({ _id: lowerCaseName });

    //if there is no equal bloco, create a new one
    if (!hasBloco) {
      const newBloco = { _id: lowerCaseName, name: lowerCaseName, address: lowerCaseAddress, lat: lat, lng: lng, admId: admId, admName: admName };

      const resultAddBloco = await db.collection("blocos").insertOne(newBloco);
      
      //testing block
      resultAddBloco
      ? response.status(201).json({status: 201, data: newBloco})
      : response.status(400).json({ status: 400, message:"Bad request", data: newBloco});

    } else if (hasBloco) {
      response.status(409).json({ status: 409, message: "Bloco already exist" });
    }
  } catch (err) {
    (err) => console.log(err);
    response.status(500).json({ status: 500, message: "Server error" });
  } finally {
    client.close();
  }
};

module.exports = { addBloco };
